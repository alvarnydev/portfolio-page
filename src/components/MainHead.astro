---
import "../styles/global.css";

interface Props {
  title?: string | undefined;
  description?: string | undefined;
}

const {
  title = "yanniksahl.com",
  description = "Hi, I'm Yannik Sahl and here on my personal site you can find out more about me and my programming projects and experience.",
} = Astro.props;
---

<meta charset="UTF-8" />
<meta name="description" property="og:description" content={description} />
<meta name="viewport" content="width=device-width" />
<meta name="generator" content={Astro.generator} />
<title>{title}</title>

<link rel="icon" type="image/x-icon" href="/favicon.svg" />
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
  href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
  rel="stylesheet"
/>
<script is:inline>
  document.addEventListener("astro:before-swap", (ev) => {
    ev.newDocument.documentElement.classList =
      document.documentElement.classList;
  });
</script>
<script>
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };

  document.documentElement.classList[
    getThemePreference() === "dark" ? "add" : "remove"
  ]("theme-dark");

  document.addEventListener("astro:after-swap", () => {
    document.documentElement.classList[
      getThemePreference() === "dark" ? "add" : "remove"
    ]("theme-dark");
  });

  document.addEventListener("astro:page-load", () => {
    // Watch the document element and persist user preference when it changes.
    const observer = new MutationObserver(function () {
      const isDark = document.documentElement.classList.contains("theme-dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    });
    document.addEventListener("astro:before-preparation", () => {
      observer.disconnect();
    });
  });

  document.addEventListener("astro:page-load", () => {
    const observerOptions = {
      root: null,
      rootMargin: "0px",
      threshold: 0,
    };

    function observerCallback(
      entries: IntersectionObserverEntry[],
      observer: IntersectionObserver,
    ) {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          if (entry.target instanceof HTMLElement) {
            const classes = entry.target.classList;
            classes.add("animate");

            if (classes.contains("animate-children")) {
              const children = entry.target.querySelectorAll("li");
              children.forEach((child, index) => {
                child.classList.add("animate", "animate-fade");
                child.style.animationDelay = `${(1 + index) * 0.1}s`;
              });
            }
          }
        }
      });
    }

    const observer = new IntersectionObserver(
      observerCallback,
      observerOptions,
    );

    const animateEls = document.querySelectorAll("[class*=animate-]");
    animateEls?.forEach((el) => {
      observer.observe(el);
    });

    document.addEventListener("astro:before-preparation", () => {
      observer.disconnect();
    });
  });
</script>
